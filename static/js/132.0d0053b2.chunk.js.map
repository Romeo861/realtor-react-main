{"version":3,"file":"static/js/132.0d0053b2.chunk.js","mappings":"+MASO,MAAMA,EAAQC,EAAAA,MAAW,KAC9B,MAAMC,GAAWC,EAAAA,EAAAA,MA0BjB,OACEC,EAAAA,EAAAA,MAAA,UAAQC,QA1BVC,iBACE,IACE,MAAMC,GAAOC,EAAAA,EAAAA,MACPC,EAAW,IAAIC,EAAAA,GAEfC,SADeC,EAAAA,EAAAA,IAAgBL,EAAME,IACvBE,KAIdE,GAASC,EAAAA,EAAAA,IAAIC,EAAAA,GAAI,QAASJ,EAAKK,YACfC,EAAAA,EAAAA,IAAOJ,IAEhBK,gBACLC,EAAAA,EAAAA,IAAON,EAAQ,CACnBO,KAAMT,EAAKU,YACXC,MAAOX,EAAKW,MACZC,WAAWC,EAAAA,EAAAA,QAIftB,EAAS,IACX,CAAE,MAAOuB,GACPC,EAAAA,GAAAA,MAAY,kCACd,CACF,EAEkCC,KAAK,SAASC,UAAU,aAAYC,SAAA,EAClEC,EAAAA,EAAAA,KAACC,EAAAA,IAAQ,CAACH,UAAU,uBAAuB,yBAEpC,G,uHCjCb,MAiEA,EAjEuBI,KACrB,MAAOV,EAAOW,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,GAoB3C,OACE9B,EAAAA,EAAAA,MAAA,WAASwB,UAAU,eAAcC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,uBAAsBC,SAAC,oBACrCzB,EAAAA,EAAAA,MAAA,OAAKwB,UAAU,8BAA6BC,SAAA,EAC1CC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,2BAA0BC,UACvCC,EAAAA,EAAAA,KAAA,OACEO,IAAI,+EACJC,IAAI,WAGRR,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0BAAyBC,UACtCzB,EAAAA,EAAAA,MAAA,QAAMmC,SAzBdjC,eAAwBkC,GACtBA,EAAEC,iBACFL,GAAa,GACb,IACE,MAAM7B,GAAOC,EAAAA,EAAAA,YACPkC,EAAAA,EAAAA,IAAuBnC,EAAMe,GACnCI,EAAAA,GAAAA,QAAc,kBACdU,GAAa,EACf,CAAE,MAAOX,GACPC,EAAAA,GAAAA,MAAY,oDACZU,GAAa,EACf,CACF,EAakCR,UAAU,qBAAoBC,SAAA,EACtDC,EAAAA,EAAAA,KAAA,SACEH,KAAK,QACLgB,GAAG,QACHC,YAAY,gBACZhB,UAAU,2BACViB,MAAOvB,EACPwB,SApCZ,SAAkBN,GAChBP,EAASO,EAAEO,OAAOF,MACpB,KAqCUzC,EAAAA,EAAAA,MAAA,OAAKwB,UAAU,6BAA4BC,SAAA,EACzCzB,EAAAA,EAAAA,MAAA,KAAGwB,UAAU,gCAA+BC,SAAA,CAAC,yBAE3CC,EAAAA,EAAAA,KAACkB,EAAAA,GAAI,CAACC,GAAG,WAAUpB,SAAC,iBAEtBC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,gCAA+BC,UAC1CC,EAAAA,EAAAA,KAACkB,EAAAA,GAAI,CAACC,GAAG,WAAUpB,SAAC,0BAGxBC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,4BAA4BD,KAAK,SAAQE,SACxDM,EAAY,mBAAqB,sBAEpCL,EAAAA,EAAAA,KAAA,OAAKF,UAAU,4BAA2BC,UACxCC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,UAELC,EAAAA,EAAAA,KAAC9B,EAAAA,EAAK,cAIJ,C","sources":["components/OAuth.jsx","pages/ForgotPassword.jsx"],"sourcesContent":["import { getAuth, GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport { doc, getDoc, serverTimestamp, setDoc } from \"firebase/firestore\";\nimport { FcGoogle } from \"react-icons/fc\";\nimport { toast } from \"react-toastify\";\nimport { db } from \"../firebase\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./OAuth.scss\";\nimport React from \"react\";\n\nexport const OAuth = React.memo(() => {\n  const navigate = useNavigate();\n  async function onGoogleClick() {\n    try {\n      const auth = getAuth();\n      const provider = new GoogleAuthProvider();\n      const result = await signInWithPopup(auth, provider);\n      const user = result.user;\n\n      // check for the user\n\n      const docRef = doc(db, \"users\", user.uid);\n      const docSnap = await getDoc(docRef);\n\n      if (!docSnap.exists()) {\n        await setDoc(docRef, {\n          name: user.displayName,\n          email: user.email,\n          timestamp: serverTimestamp(),\n        });\n      }\n\n      navigate(\"/\");\n    } catch (error) {\n      toast.error(\"Could not authorize with Google\");\n    }\n  }\n  return (\n    <button onClick={onGoogleClick} type=\"button\" className=\" OAuth-btn\">\n      <FcGoogle className=\" OAuth-btn__google\" />\n      Continue with Google\n    </button>\n  );\n});\n","import React, { useState } from \"react\";\nimport \"./SignIn.scss\";\nimport { getAuth, sendPasswordResetEmail } from \"firebase/auth\";\nimport { Link } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { OAuth } from \"../components/OAuth\";\n\nconst ForgotPassword = () => {\n  const [email, setEmail] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  function onChange(e) {\n    setEmail(e.target.value);\n  }\n\n  async function onSubmit(e) {\n    e.preventDefault();\n    setIsLoading(true);\n    try {\n      const auth = getAuth();\n      await sendPasswordResetEmail(auth, email);\n      toast.success(\"Email was sent\");\n      setIsLoading(false);\n    } catch (error) {\n      toast.error(\"Could not send reset password, Enter valid email\");\n      setIsLoading(false);\n    }\n  }\n\n  return (\n    <section className=\"form-section\">\n      <h1 className=\" form-section__title\">Reset Password</h1>\n      <div className=\" form-section__form-wrapper\">\n        <div className=\"form-section__image-wrap\">\n          <img\n            src=\"https://wallpapers.com/images/hd/real-estate-house-keys-h79pvlxway8mwu2p.jpg\"\n            alt=\"key\"\n          />\n        </div>\n        <div className=\"form-section__form-wrap\">\n          <form onSubmit={onSubmit} className=\"form-section__form\">\n            <input\n              type=\"email\"\n              id=\"email\"\n              placeholder=\"Email address\"\n              className=\"form-section__form-input\"\n              value={email}\n              onChange={onChange}\n            />\n\n            <div className=\"form-section__other-detail\">\n              <p className=\"form-section__account-signing\">\n                Don't have a account?\n                <Link to=\"/sign-up\">Register</Link>\n              </p>\n              <p className=\"form-section__forgot-password\">\n                <Link to=\"/sign-in\">Sign in instead</Link>\n              </p>\n            </div>\n            <button className=\"form-section__btn-signing\" type=\"submit\">\n              {isLoading ? \"Sending Email...\" : \"Send reset Email\"}\n            </button>\n            <div className=\"form-section__border-line\">\n              <p>OR</p>\n            </div>\n            <OAuth />\n          </form>\n        </div>\n      </div>\n    </section>\n  );\n};\nexport default ForgotPassword;\n"],"names":["OAuth","React","navigate","useNavigate","_jsxs","onClick","async","auth","getAuth","provider","GoogleAuthProvider","user","signInWithPopup","docRef","doc","db","uid","getDoc","exists","setDoc","name","displayName","email","timestamp","serverTimestamp","error","toast","type","className","children","_jsx","FcGoogle","ForgotPassword","setEmail","useState","isLoading","setIsLoading","src","alt","onSubmit","e","preventDefault","sendPasswordResetEmail","id","placeholder","value","onChange","target","Link","to"],"sourceRoot":""}